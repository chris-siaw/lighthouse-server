name: Lighthouse Reports

on:
  push:
    branches:
      - main

jobs:
  lighthouse:
    runs-on: ubuntu-24.04
    env:
      VERCEL_BLOB_TOKEN: ${{ secrets.VERCEL_BLOB_TOKEN }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      # TARGET_URL should be a comma-separated list of URLs to test.
      TARGET_URL: ${{ secrets.TARGET_URL }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Install Lighthouse globally
        run: npm install -g lighthouse

      - name: Install @vercel/blob locally
        run: npm install @vercel/blob

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq chromium-browser postgresql-client

      - name: Run Lighthouse, upload report, and update database
        run: |
          # Split TARGET_URL into an array (comma-separated list)
          IFS=',' read -r -a URL_ARRAY <<< "$TARGET_URL"
          for url in "${URL_ARRAY[@]}"; do
            echo "Running Lighthouse for $url"
            
            # Create a temporary directory for the reports
            TEMP_DIR=$(mktemp -d)
            echo "Temporary directory created: $TEMP_DIR"
            
            # Generate Lighthouse reports in JSON and HTML formats
            lighthouse "$url" --output=json --quiet --chrome-flags="--no-sandbox --headless --disable-dev-shm-usage" --output-path="$TEMP_DIR/report.json"
            lighthouse "$url" --output=html --quiet --chrome-flags="--no-sandbox --headless --disable-dev-shm-usage" --output-path="$TEMP_DIR/report.html"
            
            # If no JSON report is generated, skip this URL.
            if [ ! -f "$TEMP_DIR/report.json" ]; then
              echo "Error: Lighthouse did not generate report.json for $url. Skipping..."
              rm -rf "$TEMP_DIR"
              continue
            fi
            
            # Extract Lighthouse scores using jq.
            PERFORMANCE=$(jq -r '.categories.performance.score * 100' "$TEMP_DIR/report.json")
            ACCESSIBILITY=$(jq -r '.categories.accessibility.score * 100' "$TEMP_DIR/report.json")
            BEST_PRACTICES=$(jq -r '.categories."best-practices".score * 100' "$TEMP_DIR/report.json")
            SEO=$(jq -r '.categories.seo.score * 100' "$TEMP_DIR/report.json")
            echo "Scores - Performance: $PERFORMANCE, Accessibility: $ACCESSIBILITY, Best Practices: $BEST_PRACTICES, SEO: $SEO"
            
            # Create a safe filename based on the URL and move the HTML report.
            REPORT_FILENAME="lighthouse_$(echo $url | sed 's/[^a-zA-Z0-9]/_/g').html"
            mv "$TEMP_DIR/report.html" "$REPORT_FILENAME"
            echo "Moved report file to: $REPORT_FILENAME"
            ls -al "$REPORT_FILENAME"
            
            # Upload the report using the Node.js script.
            UPLOAD_OUTPUT=$(node scripts/uploadToVercelBlob.js "$REPORT_FILENAME")
            echo "Upload script output: $UPLOAD_OUTPUT"
            
            # Extract the public URL from the JSON response (from the "url" property)
            REPORT_URL=$(echo "$UPLOAD_OUTPUT" | grep -o 'https://[^ ]*')
            echo "Extracted report URL: $REPORT_URL"
            
            if [ -z "$REPORT_URL" ]; then
              echo "Error: No report URL extracted for $url"
            else
              # Insert the Lighthouse run data into the database.
              SQL="INSERT INTO lighthouse_tests (url, performance_score, accessibility_score, best_practices_score, seo_score, timestamp, report_url) VALUES ('$url', $PERFORMANCE, $ACCESSIBILITY, $BEST_PRACTICES, $SEO, NOW(), '$REPORT_URL');"
              echo "$SQL"
              echo "$SQL" | psql "$DATABASE_URL"
            fi
            
            # Clean up the temporary directory.
            rm -rf "$TEMP_DIR"
            echo "Temporary directory cleaned up: $TEMP_DIR"
          done
        shell: bash

      - name: List final report files
        run: ls -al lighthouse_*.html || echo "No report files found"
